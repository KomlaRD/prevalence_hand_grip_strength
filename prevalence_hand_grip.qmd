---
title: "Prevalence of hand grip strength among patients with diabetes"
format: html
---

```{r setup, include=FALSE}
# Project setup

knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE) # mute codes
```


```{r load-packages}
pacman::p_load(
  tidyverse, # Data manipulation
  googlesheets4, # Import dataset from google sheet
  janitor, # Clean column names
  skimr, # Skim dataset
  gtsummary, # Table summaries
  finalfit, # Column labels
  here, # File management
  rio, # Export dataset
  broom, # Tidy output
  DataExplorer
)
```


```{r load-dataset}
#| message: false
# Load dataset
df <- read_sheet("https://docs.google.com/spreadsheets/d/1k_VoEKpsv5EtCjwA7E0oPXegnOe0kpR3X0QN-q-4knM/edit?usp=sharing")
```

```{r clean-names}
# Clean names
df <- clean_names(df)
```

```{r extract-column-names}
# Extract column names starting with data_
data_cols <- names(df)[grepl("^data_", names(df))]

extracted_part <- substr(data_cols, 6, nchar(data_cols))

# Replace existing column names with new extracted names
names(df)[grepl("^data_", names(df))] <- extracted_part
```

```{r remove-redundant-variables}
df <- df%>%
  select(-c(
    meta_instance_id,
    start_time,
    participant_consent_form,
    end_time,
    type_2_diabetes, # Screening question
    participant_id
  ))
```

```{r calculate-bmi}
# Calculate body mass index
df <- df%>%
  mutate(
    bmi = weight/(height * height),
    height_cm = height * 100
  )
```


```{r mutate-additional-variables}
# Low muscle strength cut off EWGSOP2
male_cut_off <- 27
female_cut_off <- 16

# TODO: Cross-check bmi categories 
df <- df%>%
  mutate(
    bmi_cat = case_when(
      bmi < 18.5 ~ "Underweight",
      bmi >= 18.5 & bmi <= 24.9 ~ "Normal",
      bmi >= 25.0 & bmi <= 29.9 ~ "Overweight",
      bmi >= 30.0 ~ "Obese"
    ),
    average_grip_strength = (handgrip_left + handgrip_right)/2,
    low_grip_strength = case_when(
      gender == "Male" & average_grip_strength < male_cut_off ~ "Yes",
      gender == "Female" & average_grip_strength < female_cut_off ~ "Yes",
      .default = "No"
    )
  )


# Remove rows with missing values in average hand grip strength column
clean_data <- subset(df, !is.na(average_grip_strength))


# Categorise low muscle strength
clean_data <- clean_data%>%
  mutate(
    low_grip_strength = case_when(
      gender == "Male" & average_grip_strength < male_cut_off ~ "Yes",
      gender == "Female" & average_grip_strength < female_cut_off ~ "Yes",
      .default = "No"
    )
  )
```

```{r normality-test}
# Function to perform Shapiro-Wilk test and extract p-value
shapiro_test <- function(x) {
  shapiro_result <- shapiro.test(x)
  return(shapiro_result$p.value)
}

# Extract numeric variables from the dataset
numeric_vars <- df %>%
  select_if(is.numeric)

# Apply the Shapiro-Wilk test to each numeric variable and tidy the results
shapiro_p_values <- numeric_vars %>%
  summarise(across(everything(), ~ shapiro_test(.))) %>%
  pivot_longer(everything(), names_to = "Variable", values_to = "P_Value")

# Display the p-values
print("Shapiro values for normality testing")
print(shapiro_p_values)
```


```{r skim-dataset}
# Skim dataset
skim(df)
```

```{r correct-typo}
# Correct visceral fat spelling
df <- df |>
  rename(
    visceral_fat = viceral_fat
  )
```

```{r rename-variables}
# Label variables
df <- df |>
  mutate(
    age = ff_label(age, "Age (years"),
    gender = ff_label(gender, "Sex of participant"),
    education_level = ff_label(education_level, "Educational status"),
    marital_status = ff_label(marital_status, "Marital status"),
    smoking = ff_label(smoking, "Smoking"),
    alcohol = ff_label(alcohol, "Alcohol intake"),
    physical_activity = ff_label(physical_activity, "Physical activity"),
    hand_grip_position = ff_label(hand_grip_position, "Position of HGS measurement"),
    bmi_cat = ff_label(bmi_cat, "BMI category"),
    other_health_condition = ff_label(other_health_condition, "Comorbidities"),
    if_yes_what_conditions = ff_label(if_yes_what_conditions, "List of comorbidities"),
    other_health_conditions = ff_label(other_health_conditions, "Additional health conditions"),
    family_history_of_diabetes = ff_label(family_history_of_diabetes, "Family history of diabetes"),
    type_2_diabetes_management = ff_label(type_2_diabetes_management, "Management of condition"),
    
    religion = ff_label(religion, "Religion"),
    height = ff_label(height, "Height (cm)"),
    weight = ff_label(weight, "Weight (kg)"),
    handgrip_left = ff_label(handgrip_left, "Hand grip left hand (kg)"),
    handgrip_right = ff_label(handgrip_right, "Hand grip right hand (kg)"),
    muscle_mass = ff_label(muscle_mass, "Muscle mass (%)"),
    body_fat = ff_label(body_fat, "Body fat (%)"),
    visceral_fat = ff_label(visceral_fat, "Visceral fat"),
    bmi = ff_label(bmi, "Body mass index"),
    average_grip_strength = ff_label(average_grip_strength, "Average grip strength"),
    low_grip_strength = ff_label(low_grip_strength, "Low muscle strength")
  )
```


```{r table-summary}
# Table summary
df%>%
  select(
    -c(if_yes)
  )%>%
  tbl_summary(
     type = all_dichotomous() ~ "categorical"
  )
```


```{r clean-data-summary}
# Table summary
clean_data%>%
  select(
    -c(if_yes)
  )%>%
  tbl_summary(
     type = all_dichotomous() ~ "categorical"
  ) |> add_ci()
```

```{r clean-data-by-sex}
# Table summary
clean_data%>%
  select(
    -c(if_yes)
  )%>%
  tbl_summary(
     type = all_dichotomous() ~ "categorical",
     by = gender
  ) |>
  add_p() |>
  add_ci()
```



```{r report-one}
# report_df <- clean_data |>
#   select(-c(if_yes))
# 
# create_report(report_df)
```

```{r report-two}
# create_report(numeric_vars)
```


```{r export_clean_data}
# Export csv data
export(clean_data, here("data", "hand_grip_dataset.csv"))

# Export excel data
#export(clean_data, here("data", "hand_grip_dataset.xlsx"))

# Export spss data
#export(clean_data, here("data", "hand_grip_dataset.sav"))

# Export Rdata
export(clean_data, here("data", "hand_grip_dataset.RData"))
```

```{r}
df_ml <- clean_data %>% select(c(age, gender, weight, height, bmi_cat, average_grip_strength))

# Export csv data
export(df_ml, here("data", "df_ml.csv"))
```


```{r}
df_classification <- clean_data %>% select(c(age, gender, weight, height, bmi_cat, low_grip_strength))

# Export csv data
export(df_classification, here("data", "df_class.csv"))
```


